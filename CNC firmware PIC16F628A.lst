CCS PCM C Compiler, Version 4.105, 39979               14-dez-16 19:54

               Filename: C:\Users\Bancada\Dropbox\Xevete\UNISC\2016\TCC2\Firmware PIC16F628A HalfStep\CNC firmware PIC16F628A.lst

               ROM used: 1700 words (83%)
                         Largest free fragment is 348
               RAM used: 82 (37%) at main() level
                         126 (56%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5FD
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   04B
0020:  MOVF   22,W
0021:  MOVWF  04
0022:  MOVF   23,W
0023:  MOVWF  77
0024:  MOVF   24,W
0025:  MOVWF  78
0026:  MOVF   25,W
0027:  MOVWF  79
0028:  MOVF   26,W
0029:  MOVWF  7A
002A:  MOVF   27,W
002B:  MOVWF  0A
002C:  SWAPF  21,W
002D:  MOVWF  03
002E:  SWAPF  7F,F
002F:  SWAPF  7F,W
0030:  RETFIE
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  // exemplo de entrada de dados x-25y250z1, +0 vai apra posicao inicial e v10 seta velocidade em 10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset                                                      
.................... #FUSES MCLR                     //Master Clear pin used for I/O 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
....................                  
.................... #use delay(clock=20000000)    //clock maximo com ocilador externo 
*
005F:  MOVLW  6D
0060:  MOVWF  04
0061:  BCF    03.7
0062:  MOVF   00,W
0063:  BTFSC  03.2
0064:  GOTO   072
0065:  MOVLW  06
0066:  MOVWF  78
0067:  CLRF   77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  DECFSZ 78,F
006B:  GOTO   067
006C:  MOVLW  7B
006D:  MOVWF  77
006E:  DECFSZ 77,F
006F:  GOTO   06E
0070:  DECFSZ 00,F
0071:  GOTO   065
0072:  RETURN
*
02E5:  MOVLW  03
02E6:  BSF    03.5
02E7:  SUBWF  2D,F
02E8:  BTFSS  03.0
02E9:  GOTO   2F4
02EA:  MOVLW  AD
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  MOVF   00,W
02EE:  BTFSC  03.2
02EF:  GOTO   2F4
02F0:  GOTO   2F2
02F1:  GOTO   2F2
02F2:  DECFSZ 00,F
02F3:  GOTO   2F1
02F4:  BCF    03.5
02F5:  RETURN
....................          
.................... #use rs232(baud=19200, parity=N, xmit=PIN_B2, rcv=PIN_B1)  // parametros da porta com 
.................... //define os pinos do PIC para cada função 
.................... #define mxa     PIN_B0 //motor X 
.................... #define mxb     PIN_A0                  
.................... #define mxc     PIN_A1  
.................... #define mxd     PIN_B3  
.................... #define mya     PIN_B4 //motor Y 
.................... #define myb     PIN_B5               
.................... #define myc     PIN_B6  
.................... #define myd     PIN_B7  
.................... #define AZ     PIN_A2 // Solenoide eixo Z 
.................... #define AX     PIN_A3 // sensor 0 X 
.................... #define AY     PIN_A4 // sensor 0 Y 
.................... //usa boolean consome mais ROM   
.................... #use fast_io(B)  
.................... #use fast_io(A)  
....................  
.................... #define stepType 7               //3 para fullStep e 7 para halfStep 
.................... signed int16 flag = 0;            //controle de quando chamar os movimentos 
.................... char buff[22];                    //Variavel do tipo char com 21 caracteres 
.................... unsigned long int velocidade = 1500;      //velocidade de rotação inical recomendado 7, em simulação 150 
.................... unsigned int m[4][8]={1,1,0,0,0,0,0,1,    //padrão de rotação dos motores X e Y, o Z usa vetor externo 
....................                       0,1,1,1,0,0,0,0, 
....................                       0,0,0,1,1,1,0,0, 
....................                       0,0,0,0,0,1,1,1}; 
*
0613:  MOVLW  01
0614:  MOVWF  42
0615:  MOVWF  43
0616:  CLRF   44
0617:  CLRF   45
0618:  CLRF   46
0619:  CLRF   47
061A:  CLRF   48
061B:  MOVWF  49
061C:  CLRF   4A
061D:  MOVWF  4B
061E:  MOVWF  4C
061F:  MOVWF  4D
0620:  CLRF   4E
0621:  CLRF   4F
0622:  CLRF   50
0623:  CLRF   51
0624:  CLRF   52
0625:  CLRF   53
0626:  CLRF   54
0627:  MOVWF  55
0628:  MOVWF  56
0629:  MOVWF  57
062A:  CLRF   58
062B:  CLRF   59
062C:  CLRF   5A
062D:  CLRF   5B
062E:  CLRF   5C
062F:  CLRF   5D
0630:  CLRF   5E
0631:  MOVWF  5F
0632:  MOVWF  60
0633:  MOVWF  61
.................... signed int posx = 0, posy = 0;            //posição dos motores 
.................... unsigned int16 passosx,passosy,passosz;   // variaveis de numero de passos 
.................... int sentidox, sentidoy;                   // variaveis de sentido de giro dos motores 
....................  
.................... void movex()                              //movimento de 1 pulso motor x 
.................... { 
....................    if (sentidox == 1) 
*
040E:  DECFSZ 6A,W
040F:  GOTO   418
....................    { 
....................       posx++; 
0410:  INCF   62,F
....................       if (posx > stepType) 
0411:  BTFSC  62.7
0412:  GOTO   417
0413:  MOVF   62,W
0414:  SUBLW  07
0415:  BTFSS  03.0
....................          posx = 0; 
0416:  CLRF   62
....................    }                   
....................    else 
0417:  GOTO   41D
....................    { 
....................       posx--;       
0418:  DECF   62,F
....................       if (posx < 0)//posx 
0419:  BTFSS  62.7
041A:  GOTO   41D
....................         posx = stepType; 
041B:  MOVLW  07
041C:  MOVWF  62
....................    } 
....................    output_bit( mxa, m[3][posx]); //motor X 
041D:  MOVLW  5A
041E:  ADDWF  62,W
041F:  MOVWF  04
0420:  BCF    03.7
0421:  MOVF   00,F
0422:  BTFSS  03.2
0423:  GOTO   426
0424:  BCF    06.0
0425:  GOTO   427
0426:  BSF    06.0
....................    output_bit( mxb, m[2][posx]); 
0427:  MOVLW  52
0428:  ADDWF  62,W
0429:  MOVWF  04
042A:  BCF    03.7
042B:  MOVF   00,F
042C:  BTFSS  03.2
042D:  GOTO   430
042E:  BCF    05.0
042F:  GOTO   431
0430:  BSF    05.0
....................    output_bit( mxc, m[1][posx]); 
0431:  MOVLW  4A
0432:  ADDWF  62,W
0433:  MOVWF  04
0434:  BCF    03.7
0435:  MOVF   00,F
0436:  BTFSS  03.2
0437:  GOTO   43A
0438:  BCF    05.1
0439:  GOTO   43B
043A:  BSF    05.1
....................    output_bit( mxd, m[0][posx]); 
043B:  MOVLW  42
043C:  ADDWF  62,W
043D:  MOVWF  04
043E:  BCF    03.7
043F:  MOVF   00,F
0440:  BTFSS  03.2
0441:  GOTO   444
0442:  BCF    06.3
0443:  GOTO   445
0444:  BSF    06.3
.................... } 
.................... void movey()                            //movimento de 1 pulso motor y 
.................... { 
....................    if (sentidoy == 1) 
*
0474:  DECFSZ 6B,W
0475:  GOTO   47E
....................    { 
....................       posy++; 
0476:  INCF   63,F
....................       if (posy > stepType) 
0477:  BTFSC  63.7
0478:  GOTO   47D
0479:  MOVF   63,W
047A:  SUBLW  07
047B:  BTFSS  03.0
....................          posy = 0; 
047C:  CLRF   63
....................    } 
....................    else 
047D:  GOTO   483
....................    { 
....................       posy--;       
047E:  DECF   63,F
....................       if (posy < 0)  //posy 
047F:  BTFSS  63.7
0480:  GOTO   483
....................         posy = stepType; 
0481:  MOVLW  07
0482:  MOVWF  63
....................    } 
....................    output_bit( mya, m[3][posy]); //motor Y 
0483:  MOVLW  5A
0484:  ADDWF  63,W
0485:  MOVWF  04
0486:  BCF    03.7
0487:  MOVF   00,F
0488:  BTFSS  03.2
0489:  GOTO   48C
048A:  BCF    06.4
048B:  GOTO   48D
048C:  BSF    06.4
....................    output_bit( myb, m[2][posy]); 
048D:  MOVLW  52
048E:  ADDWF  63,W
048F:  MOVWF  04
0490:  BCF    03.7
0491:  MOVF   00,F
0492:  BTFSS  03.2
0493:  GOTO   496
0494:  BCF    06.5
0495:  GOTO   497
0496:  BSF    06.5
....................    output_bit( myc, m[1][posy]); 
0497:  MOVLW  4A
0498:  ADDWF  63,W
0499:  MOVWF  04
049A:  BCF    03.7
049B:  MOVF   00,F
049C:  BTFSS  03.2
049D:  GOTO   4A0
049E:  BCF    06.6
049F:  GOTO   4A1
04A0:  BSF    06.6
....................    output_bit( myd, m[0][posy]); 
04A1:  MOVLW  42
04A2:  ADDWF  63,W
04A3:  MOVWF  04
04A4:  BCF    03.7
04A5:  MOVF   00,F
04A6:  BTFSS  03.2
04A7:  GOTO   4AA
04A8:  BCF    06.7
04A9:  GOTO   4AB
04AA:  BSF    06.7
.................... } 
....................  
.................... void limpar() //zera as variaveis de motor eo buffer; 
.................... { 
....................      passosx = 0; 
*
02F6:  CLRF   65
02F7:  CLRF   64
....................      passosy = 0; 
02F8:  CLRF   67
02F9:  CLRF   66
....................      passosz = 0;  
02FA:  CLRF   69
02FB:  CLRF   68
....................      buff = "000000000000000000000"; //limpa o buffer 
02FC:  BSF    03.5
02FD:  CLRF   2C
02FE:  CLRF   2D
02FF:  MOVLW  2A
0300:  MOVWF  04
0301:  BCF    03.7
0302:  MOVF   2C,W
0303:  ADDWF  04,F
0304:  MOVF   2D,W
0305:  BCF    03.5
0306:  CALL   031
0307:  MOVWF  00
0308:  IORLW  00
0309:  BTFSC  03.2
030A:  GOTO   310
030B:  BSF    03.5
030C:  INCF   2D,F
030D:  INCF   2C,F
030E:  GOTO   2FF
030F:  BCF    03.5
.................... } 
0310:  RETURN
.................... void mover(unsigned int16 x,unsigned int16 y, unsigned int16 z) //movimenta os motores de acordo com o numero 
.................... {   
....................      output_bit( AZ, z); 
0311:  MOVF   73,W
0312:  IORWF  74,W
0313:  BTFSS  03.2
0314:  GOTO   317
0315:  BCF    05.2
0316:  GOTO   318
0317:  BSF    05.2
....................      unsigned int16 passos = 0; 
....................      float quebrax = 0, contadorx = 0; 
....................      float quebray = 0, contadory = 0; 
0318:  CLRF   76
0319:  CLRF   75
031A:  CLRF   7E
031B:  CLRF   7D
031C:  CLRF   7C
031D:  CLRF   7B
031E:  BSF    03.5
031F:  CLRF   23
0320:  CLRF   22
0321:  CLRF   21
0322:  CLRF   20
0323:  CLRF   27
0324:  CLRF   26
0325:  CLRF   25
0326:  CLRF   24
0327:  CLRF   2B
0328:  CLRF   2A
0329:  CLRF   29
032A:  CLRF   28
....................      if      (x>=y) //quando X> 
032B:  MOVF   72,W
032C:  SUBWF  70,W
032D:  BTFSS  03.0
032E:  GOTO   340
032F:  BTFSS  03.2
0330:  GOTO   339
0331:  MOVF   71,W
0332:  BCF    03.5
0333:  SUBWF  6F,W
0334:  BTFSC  03.0
0335:  GOTO   338
0336:  BSF    03.5
0337:  GOTO   340
0338:  BSF    03.5
....................         passos = x; 
0339:  MOVF   70,W
033A:  MOVWF  76
033B:  BCF    03.5
033C:  MOVF   6F,W
033D:  MOVWF  75
....................      else if (y>=x) //quando Y> 
033E:  GOTO   358
033F:  BSF    03.5
0340:  MOVF   70,W
0341:  SUBWF  72,W
0342:  BTFSS  03.0
0343:  GOTO   353
0344:  BTFSS  03.2
0345:  GOTO   34E
0346:  BCF    03.5
0347:  MOVF   6F,W
0348:  SUBWF  71,W
0349:  BTFSC  03.0
034A:  GOTO   34D
034B:  BSF    03.5
034C:  GOTO   353
034D:  BSF    03.5
....................         passos = y;  
034E:  MOVF   72,W
034F:  MOVWF  76
0350:  MOVF   71,W
0351:  MOVWF  75
....................      else           //quando X=Y                     
0352:  GOTO   357
....................         passos = y;  
0353:  MOVF   72,W
0354:  MOVWF  76
0355:  MOVF   71,W
0356:  MOVWF  75
0357:  BCF    03.5
....................      quebrax = (float)x/passos;                      
0358:  MOVF   70,W
0359:  BSF    03.5
035A:  MOVWF  31
035B:  BCF    03.5
035C:  MOVF   6F,W
035D:  BSF    03.5
035E:  MOVWF  30
035F:  BCF    03.5
0360:  CALL   073
0361:  MOVF   77,W
0362:  BSF    03.5
0363:  MOVWF  2C
0364:  MOVF   78,W
0365:  MOVWF  2D
0366:  MOVF   79,W
0367:  MOVWF  2E
0368:  MOVF   7A,W
0369:  MOVWF  2F
036A:  MOVF   76,W
036B:  MOVWF  31
036C:  MOVF   75,W
036D:  MOVWF  30
036E:  BCF    03.5
036F:  CALL   073
0370:  BSF    03.5
0371:  MOVF   2F,W
0372:  MOVWF  33
0373:  MOVF   2E,W
0374:  MOVWF  32
0375:  MOVF   2D,W
0376:  MOVWF  31
0377:  MOVF   2C,W
0378:  MOVWF  30
0379:  MOVF   7A,W
037A:  MOVWF  37
037B:  MOVF   79,W
037C:  MOVWF  36
037D:  MOVF   78,W
037E:  MOVWF  35
037F:  MOVF   77,W
0380:  MOVWF  34
0381:  BCF    03.5
0382:  CALL   092
0383:  MOVF   7A,W
0384:  MOVWF  7E
0385:  MOVF   79,W
0386:  MOVWF  7D
0387:  MOVF   78,W
0388:  MOVWF  7C
0389:  MOVF   77,W
038A:  MOVWF  7B
....................      quebray = (float)y/passos;     
038B:  MOVF   72,W
038C:  BSF    03.5
038D:  MOVWF  31
038E:  MOVF   71,W
038F:  MOVWF  30
0390:  BCF    03.5
0391:  CALL   073
0392:  MOVF   77,W
0393:  BSF    03.5
0394:  MOVWF  2C
0395:  MOVF   78,W
0396:  MOVWF  2D
0397:  MOVF   79,W
0398:  MOVWF  2E
0399:  MOVF   7A,W
039A:  MOVWF  2F
039B:  MOVF   76,W
039C:  MOVWF  31
039D:  MOVF   75,W
039E:  MOVWF  30
039F:  BCF    03.5
03A0:  CALL   073
03A1:  BSF    03.5
03A2:  MOVF   2F,W
03A3:  MOVWF  33
03A4:  MOVF   2E,W
03A5:  MOVWF  32
03A6:  MOVF   2D,W
03A7:  MOVWF  31
03A8:  MOVF   2C,W
03A9:  MOVWF  30
03AA:  MOVF   7A,W
03AB:  MOVWF  37
03AC:  MOVF   79,W
03AD:  MOVWF  36
03AE:  MOVF   78,W
03AF:  MOVWF  35
03B0:  MOVF   77,W
03B1:  MOVWF  34
03B2:  BCF    03.5
03B3:  CALL   092
03B4:  MOVF   7A,W
03B5:  BSF    03.5
03B6:  MOVWF  27
03B7:  MOVF   79,W
03B8:  MOVWF  26
03B9:  MOVF   78,W
03BA:  MOVWF  25
03BB:  MOVF   77,W
03BC:  MOVWF  24
....................      for(;passos>0;passos--) 
03BD:  MOVF   75,F
03BE:  BTFSS  03.2
03BF:  GOTO   3C3
03C0:  MOVF   76,F
03C1:  BTFSC  03.2
03C2:  GOTO   4DF
....................      { 
....................          contadorx = contadorx + quebrax; 
03C3:  BCF    03.1
03C4:  MOVF   23,W
03C5:  MOVWF  2F
03C6:  MOVF   22,W
03C7:  MOVWF  2E
03C8:  MOVF   21,W
03C9:  MOVWF  2D
03CA:  MOVF   20,W
03CB:  MOVWF  2C
03CC:  MOVF   7E,W
03CD:  MOVWF  33
03CE:  MOVF   7D,W
03CF:  MOVWF  32
03D0:  MOVF   7C,W
03D1:  MOVWF  31
03D2:  MOVF   7B,W
03D3:  MOVWF  30
03D4:  BCF    03.5
03D5:  CALL   15E
03D6:  MOVF   7A,W
03D7:  BSF    03.5
03D8:  MOVWF  23
03D9:  MOVF   79,W
03DA:  MOVWF  22
03DB:  MOVF   78,W
03DC:  MOVWF  21
03DD:  MOVF   77,W
03DE:  MOVWF  20
....................          contadory = contadory + quebray; 
03DF:  BCF    03.1
03E0:  MOVF   2B,W
03E1:  MOVWF  2F
03E2:  MOVF   2A,W
03E3:  MOVWF  2E
03E4:  MOVF   29,W
03E5:  MOVWF  2D
03E6:  MOVF   28,W
03E7:  MOVWF  2C
03E8:  MOVF   27,W
03E9:  MOVWF  33
03EA:  MOVF   26,W
03EB:  MOVWF  32
03EC:  MOVF   25,W
03ED:  MOVWF  31
03EE:  MOVF   24,W
03EF:  MOVWF  30
03F0:  BCF    03.5
03F1:  CALL   15E
03F2:  MOVF   7A,W
03F3:  BSF    03.5
03F4:  MOVWF  2B
03F5:  MOVF   79,W
03F6:  MOVWF  2A
03F7:  MOVF   78,W
03F8:  MOVWF  29
03F9:  MOVF   77,W
03FA:  MOVWF  28
....................          if (contadorx >= 1 ) //x 
03FB:  CLRF   2F
03FC:  CLRF   2E
03FD:  CLRF   2D
03FE:  MOVLW  7F
03FF:  MOVWF  2C
0400:  MOVF   23,W
0401:  MOVWF  33
0402:  MOVF   22,W
0403:  MOVWF  32
0404:  MOVF   21,W
0405:  MOVWF  31
0406:  MOVF   20,W
0407:  MOVWF  30
0408:  BCF    03.5
0409:  CALL   2A4
040A:  BTFSC  03.0
040B:  GOTO   40E
040C:  BTFSS  03.2
040D:  GOTO   460
....................          { 
....................             movex(); 
....................             contadorx = contadorx - 1; 
*
0445:  BSF    03.1
0446:  BSF    03.5
0447:  MOVF   23,W
0448:  MOVWF  2F
0449:  MOVF   22,W
044A:  MOVWF  2E
044B:  MOVF   21,W
044C:  MOVWF  2D
044D:  MOVF   20,W
044E:  MOVWF  2C
044F:  CLRF   33
0450:  CLRF   32
0451:  CLRF   31
0452:  MOVLW  7F
0453:  MOVWF  30
0454:  BCF    03.5
0455:  CALL   15E
0456:  MOVF   7A,W
0457:  BSF    03.5
0458:  MOVWF  23
0459:  MOVF   79,W
045A:  MOVWF  22
045B:  MOVF   78,W
045C:  MOVWF  21
045D:  MOVF   77,W
045E:  MOVWF  20
045F:  BCF    03.5
....................          } 
....................          if (contadory >= 1 ) //y 
0460:  BSF    03.5
0461:  CLRF   2F
0462:  CLRF   2E
0463:  CLRF   2D
0464:  MOVLW  7F
0465:  MOVWF  2C
0466:  MOVF   2B,W
0467:  MOVWF  33
0468:  MOVF   2A,W
0469:  MOVWF  32
046A:  MOVF   29,W
046B:  MOVWF  31
046C:  MOVF   28,W
046D:  MOVWF  30
046E:  BCF    03.5
046F:  CALL   2A4
0470:  BTFSC  03.0
0471:  GOTO   474
0472:  BTFSS  03.2
0473:  GOTO   4C6
....................          { 
....................             movey(); 
....................             contadory = contadory - 1;    
*
04AB:  BSF    03.1
04AC:  BSF    03.5
04AD:  MOVF   2B,W
04AE:  MOVWF  2F
04AF:  MOVF   2A,W
04B0:  MOVWF  2E
04B1:  MOVF   29,W
04B2:  MOVWF  2D
04B3:  MOVF   28,W
04B4:  MOVWF  2C
04B5:  CLRF   33
04B6:  CLRF   32
04B7:  CLRF   31
04B8:  MOVLW  7F
04B9:  MOVWF  30
04BA:  BCF    03.5
04BB:  CALL   15E
04BC:  MOVF   7A,W
04BD:  BSF    03.5
04BE:  MOVWF  2B
04BF:  MOVF   79,W
04C0:  MOVWF  2A
04C1:  MOVF   78,W
04C2:  MOVWF  29
04C3:  MOVF   77,W
04C4:  MOVWF  28
04C5:  BCF    03.5
....................          } 
....................       //   delay_ms(velocidade); 
....................          delay_us(velocidade); 
04C6:  MOVF   41,W
04C7:  BSF    03.5
04C8:  MOVWF  2C
04C9:  INCF   2C,F
04CA:  DECF   2C,F
04CB:  BTFSC  03.2
04CC:  GOTO   4D3
04CD:  MOVLW  FF
04CE:  MOVWF  2D
04CF:  BCF    03.5
04D0:  CALL   2E5
04D1:  BSF    03.5
04D2:  GOTO   4CA
04D3:  BCF    03.5
04D4:  MOVF   40,W
04D5:  BSF    03.5
04D6:  MOVWF  2D
04D7:  BCF    03.5
04D8:  CALL   2E5
....................      } 
04D9:  MOVF   75,W
04DA:  BTFSC  03.2
04DB:  DECF   76,F
04DC:  DECF   75,F
04DD:  BSF    03.5
04DE:  GOTO   3BD
....................      limpar(); 
04DF:  BCF    03.5
04E0:  CALL   2F6
.................... } 
04E1:  RETURN
.................... void zero()   //leva o carro até os sensores serem precionados 
.................... { 
04E2:  MOVLW  01
04E3:  MOVWF  6C
....................    int a = 1; 
....................    sentidox = 1;  //seta o movimento em regreço 
04E4:  MOVWF  6A
....................    sentidoy = 1;  //seta o movimento em regreço 
04E5:  MOVWF  6B
....................    while (a) 
....................    {       
04E6:  MOVF   6C,F
04E7:  BTFSC  03.2
04E8:  GOTO   4FF
....................       mover(!input(AX),!input (AY),0); //move 1 passo em cada motor ainda não em 0 
04E9:  MOVLW  00
04EA:  BTFSS  05.3
04EB:  MOVLW  01
04EC:  MOVWF  6D
04ED:  MOVLW  00
04EE:  BTFSS  05.4
04EF:  MOVLW  01
04F0:  MOVWF  6E
04F1:  CLRF   70
04F2:  MOVF   6D,W
04F3:  MOVWF  6F
04F4:  CLRF   72
04F5:  MOVF   6E,W
04F6:  MOVWF  71
04F7:  CLRF   74
04F8:  CLRF   73
04F9:  CALL   311
....................       if ((input(AX) == 1)&&(input(AY) == 1)) //contorle de parada do while 
04FA:  BTFSS  05.3
04FB:  GOTO   4FE
04FC:  BTFSC  05.4
....................          a = 0;                                                  
04FD:  CLRF   6C
....................    } 
04FE:  GOTO   4E6
....................    limpar(); 
04FF:  CALL   2F6
.................... } 
0500:  RETURN
.................... void converte(int w)  //procura valor para caracter de filtragem w 
.................... { 
*
0516:  CLRF   6F
0517:  CLRF   71
0518:  CLRF   70
....................     int a,b; 
....................     int sinal = 0; 
....................     long int temp = 0; //valor numerico temporario calculado 
....................     for (a=0;a<21;a++)  //busca posição do caracter procurado no buff 
0519:  CLRF   6D
051A:  MOVF   6D,W
051B:  SUBLW  14
051C:  BTFSS  03.0
051D:  GOTO   565
....................     {    
....................         if(buff[a] == w) //caso encontrado 
051E:  MOVLW  2A
051F:  ADDWF  6D,W
0520:  MOVWF  04
0521:  BCF    03.7
0522:  MOVF   6C,W
0523:  SUBWF  00,W
0524:  BTFSS  03.2
0525:  GOTO   563
....................         {      
....................             for (b=a+1;b<21;b++)   //converte a string em int a partir do caracter inforado 
0526:  MOVLW  01
0527:  ADDWF  6D,W
0528:  MOVWF  6E
0529:  MOVF   6E,W
052A:  SUBLW  14
052B:  BTFSS  03.0
052C:  GOTO   563
....................             { 
....................                if(buff[b] == 45) 
052D:  MOVLW  2A
052E:  ADDWF  6E,W
052F:  MOVWF  04
0530:  BCF    03.7
0531:  MOVF   00,W
0532:  SUBLW  2D
0533:  BTFSS  03.2
0534:  GOTO   538
....................                   sinal = 1; 
0535:  MOVLW  01
0536:  MOVWF  6F
....................                else if ((buff[b]>=48)&&((buff[b]<=57))) 
0537:  GOTO   561
0538:  MOVLW  2A
0539:  ADDWF  6E,W
053A:  MOVWF  04
053B:  BCF    03.7
053C:  MOVF   00,W
053D:  SUBLW  2F
053E:  BTFSC  03.0
053F:  GOTO   55D
0540:  MOVLW  2A
0541:  ADDWF  6E,W
0542:  MOVWF  04
0543:  BCF    03.7
0544:  MOVF   00,W
0545:  SUBLW  39
0546:  BTFSS  03.0
0547:  GOTO   55D
....................                   temp = (temp*10)+(buff[b]-48); 
0548:  MOVF   71,W
0549:  MOVWF  73
054A:  MOVF   70,W
054B:  MOVWF  72
054C:  CLRF   75
054D:  MOVLW  0A
054E:  MOVWF  74
054F:  CALL   501
0550:  MOVLW  2A
0551:  ADDWF  6E,W
0552:  MOVWF  04
0553:  BCF    03.7
0554:  MOVLW  30
0555:  SUBWF  00,W
0556:  ADDWF  78,W
0557:  MOVWF  70
0558:  MOVF   79,W
0559:  MOVWF  71
055A:  BTFSC  03.0
055B:  INCF   71,F
....................                else 
055C:  GOTO   561
....................                { 
....................                   b = 21; 
055D:  MOVLW  15
055E:  MOVWF  6E
....................                   a = b; 
055F:  MOVF   6E,W
0560:  MOVWF  6D
....................                } 
....................             }            
0561:  INCF   6E,F
0562:  GOTO   529
....................         } 
....................     } 
0563:  INCF   6D,F
0564:  GOTO   51A
....................     switch(w)  //distribui a cada cada variavel seu valor correto 
....................     { 
0565:  MOVLW  76
0566:  SUBWF  6C,W
0567:  ADDLW  FB
0568:  BTFSC  03.0
0569:  GOTO   5F3
056A:  ADDLW  05
056B:  GOTO   5F4
....................       case 120: //x 
....................          passosx = temp;  //valor atribuido a x 
056C:  MOVF   71,W
056D:  MOVWF  65
056E:  MOVF   70,W
056F:  MOVWF  64
....................          sentidox = sinal; //positivo ou negativo, sentido de retação 
0570:  MOVF   6F,W
0571:  MOVWF  6A
....................          break; 
0572:  GOTO   5F3
....................       case 121: //y 
....................          passosy = temp;  //valor atribuido a y 
0573:  MOVF   71,W
0574:  MOVWF  67
0575:  MOVF   70,W
0576:  MOVWF  66
....................          sentidoy = sinal; //positivo ou negativo, sentido de retação 
0577:  MOVF   6F,W
0578:  MOVWF  6B
....................          break; 
0579:  GOTO   5F3
....................       case 122: //z 
....................          passosz = temp;  //valor atribuido   
057A:  MOVF   71,W
057B:  MOVWF  69
057C:  MOVF   70,W
057D:  MOVWF  68
....................          break; 
057E:  GOTO   5F3
....................       case 118: //v seta a velocidade dos motores 
....................          if (temp > 0) 
057F:  MOVF   70,F
0580:  BTFSS  03.2
0581:  GOTO   585
0582:  MOVF   71,F
0583:  BTFSC  03.2
0584:  GOTO   5F3
....................          { 
....................           if (temp > 200) 
0585:  MOVF   71,F
0586:  BTFSS  03.2
0587:  GOTO   58C
0588:  MOVF   70,W
0589:  SUBLW  C8
058A:  BTFSC  03.0
058B:  GOTO   5E6
....................             { 
....................                switch(temp)   //taxas de dados suportadas  
....................                { 
058C:  MOVF   70,W
058D:  MOVWF  77
058E:  MOVF   71,W
058F:  MOVWF  7A
0590:  MOVF   7A,W
0591:  BTFSS  03.2
0592:  GOTO   597
0593:  MOVLW  C9
0594:  SUBWF  77,W
0595:  BTFSC  03.2
0596:  GOTO   5BB
0597:  MOVF   7A,W
0598:  BTFSS  03.2
0599:  GOTO   59E
059A:  MOVLW  CA
059B:  SUBWF  77,W
059C:  BTFSC  03.2
059D:  GOTO   5C2
059E:  MOVF   7A,W
059F:  BTFSS  03.2
05A0:  GOTO   5A5
05A1:  MOVLW  CB
05A2:  SUBWF  77,W
05A3:  BTFSC  03.2
05A4:  GOTO   5C9
05A5:  MOVF   7A,W
05A6:  BTFSS  03.2
05A7:  GOTO   5AC
05A8:  MOVLW  CC
05A9:  SUBWF  77,W
05AA:  BTFSC  03.2
05AB:  GOTO   5D0
05AC:  MOVF   7A,W
05AD:  BTFSS  03.2
05AE:  GOTO   5B3
05AF:  MOVLW  CD
05B0:  SUBWF  77,W
05B1:  BTFSC  03.2
05B2:  GOTO   5D7
05B3:  MOVF   7A,W
05B4:  BTFSS  03.2
05B5:  GOTO   5BA
05B6:  MOVLW  CE
05B7:  SUBWF  77,W
05B8:  BTFSC  03.2
05B9:  GOTO   5DE
05BA:  GOTO   5E5
....................                  case 201: set_uart_speed(1200); 
05BB:  MOVLW  FF
05BC:  BSF    03.5
05BD:  MOVWF  19
05BE:  MOVLW  A2
05BF:  MOVWF  18
....................                            break;                    
05C0:  BCF    03.5
05C1:  GOTO   5E5
....................                  case 202: set_uart_speed(4800); 
05C2:  MOVLW  40
05C3:  BSF    03.5
05C4:  MOVWF  19
05C5:  MOVLW  A2
05C6:  MOVWF  18
....................                            break; 
05C7:  BCF    03.5
05C8:  GOTO   5E5
....................                  case 203: set_uart_speed(9600); 
05C9:  MOVLW  81
05CA:  BSF    03.5
05CB:  MOVWF  19
05CC:  MOVLW  A6
05CD:  MOVWF  18
....................                            break; 
05CE:  BCF    03.5
05CF:  GOTO   5E5
....................                  case 204: set_uart_speed(19200); 
05D0:  MOVLW  40
05D1:  BSF    03.5
05D2:  MOVWF  19
05D3:  MOVLW  A6
05D4:  MOVWF  18
....................                            break; 
05D5:  BCF    03.5
05D6:  GOTO   5E5
....................                  case 205: set_uart_speed(57600); 
05D7:  MOVLW  15
05D8:  BSF    03.5
05D9:  MOVWF  19
05DA:  MOVLW  A6
05DB:  MOVWF  18
....................                            break; 
05DC:  BCF    03.5
05DD:  GOTO   5E5
....................                  case 206: set_uart_speed(115200); 
05DE:  MOVLW  0A
05DF:  BSF    03.5
05E0:  MOVWF  19
05E1:  MOVLW  A6
05E2:  MOVWF  18
....................                            break; 
05E3:  BCF    03.5
05E4:  GOTO   5E5
....................                } 
....................             } 
....................             else 
05E5:  GOTO   5F2
....................             velocidade = temp*100; 
05E6:  MOVF   71,W
05E7:  MOVWF  73
05E8:  MOVF   70,W
05E9:  MOVWF  72
05EA:  CLRF   75
05EB:  MOVLW  64
05EC:  MOVWF  74
05ED:  CALL   501
05EE:  MOVF   79,W
05EF:  MOVWF  41
05F0:  MOVF   78,W
05F1:  MOVWF  40
....................          limpar(); 
05F2:  CALL   2F6
....................          }            
....................     }          
.................... } 
05F3:  RETURN
....................  
.................... #int_rda 
.................... void serial_isr()  //Utiliza-se uma interrupção para receber dados da porta serial   
.................... {  
....................    gets(buff);  //coloca no buffer o que foi recebido 
*
004B:  MOVLW  2A
004C:  MOVWF  04
004D:  BCF    03.7
004E:  DECF   04,F
004F:  INCF   04,F
0050:  BTFSS  0C.5
0051:  GOTO   050
0052:  MOVF   1A,W
0053:  MOVWF  00
0054:  MOVLW  0D
0055:  SUBWF  00,W
0056:  BTFSS  03.2
0057:  GOTO   04F
0058:  CLRF   00
....................    flag = 1; //habilita a interpretação do buff 
0059:  CLRF   29
005A:  MOVLW  01
005B:  MOVWF  28
.................... } 
005C:  BCF    0C.5
005D:  BCF    0A.3
005E:  GOTO   020
.................... void main(void) // função principal 
.................... {                                                
*
05FD:  CLRF   04
05FE:  BCF    03.7
05FF:  MOVLW  1F
0600:  ANDWF  03,F
0601:  MOVLW  40
0602:  BSF    03.5
0603:  MOVWF  19
0604:  MOVLW  A6
0605:  MOVWF  18
0606:  MOVLW  90
0607:  BCF    03.5
0608:  MOVWF  18
0609:  CLRF   29
060A:  CLRF   28
060B:  MOVLW  05
060C:  MOVWF  41
060D:  MOVLW  DC
060E:  MOVWF  40
060F:  CLRF   62
0610:  CLRF   63
0611:  MOVLW  07
0612:  MOVWF  1F
....................    set_tris_b(0b00000010);  
*
0634:  MOVLW  02
0635:  TRIS   6
....................    set_tris_a(0b00011000);     
0636:  MOVLW  18
0637:  TRIS   5
....................    output_bit( AZ, 0);  
0638:  BCF    05.2
....................    delay_ms(300);                   
0639:  MOVLW  02
063A:  MOVWF  6C
063B:  MOVLW  96
063C:  MOVWF  6D
063D:  CALL   05F
063E:  DECFSZ 6C,F
063F:  GOTO   63B
....................    mover(200, 200, 0);        //movimentação padrão de inico, garante motores sempre iniciarem iguais 
0640:  CLRF   70
0641:  MOVLW  C8
0642:  MOVWF  6F
0643:  CLRF   72
0644:  MOVWF  71
0645:  CLRF   74
0646:  CLRF   73
0647:  CALL   311
....................    delay_ms(20);    
0648:  MOVLW  14
0649:  MOVWF  6D
064A:  CALL   05F
....................    zero();                    //retorna o carro a 0 para inicio do trabalho 
064B:  CALL   4E2
....................    enable_interrupts(int_rda);//Habilita interrupção da porta serial 
064C:  BSF    03.5
064D:  BSF    0C.5
....................    enable_interrupts(global); 
064E:  MOVLW  C0
064F:  BCF    03.5
0650:  IORWF  0B,F
....................    while(1)                   //sempre a espera de entrada de comando 
....................    {                           
....................       if (flag <= 0)  //nada para receber, envia o feedback              
0651:  BTFSC  29.7
0652:  GOTO   65A
0653:  MOVF   29,F
0654:  BTFSS  03.2
0655:  GOTO   67D
0656:  MOVF   28,W
0657:  SUBLW  00
0658:  BTFSS  03.0
0659:  GOTO   67D
....................       {    
....................          printf("2\n\r"); // feedback para enviar proxima coordenada  
065A:  MOVLW  32
065B:  BTFSS  0C.4
065C:  GOTO   65B
065D:  MOVWF  19
065E:  MOVLW  0A
065F:  BTFSS  0C.4
0660:  GOTO   65F
0661:  MOVWF  19
0662:  MOVLW  0D
0663:  BTFSS  0C.4
0664:  GOTO   663
0665:  MOVWF  19
....................          if (flag <=0)  
0666:  BTFSC  29.7
0667:  GOTO   66F
0668:  MOVF   29,F
0669:  BTFSS  03.2
066A:  GOTO   67C
066B:  MOVF   28,W
066C:  SUBLW  00
066D:  BTFSS  03.0
066E:  GOTO   67C
....................             for(flag=-2000;flag<0;flag++)    //delay interrompivel 
066F:  MOVLW  F8
0670:  MOVWF  29
0671:  MOVLW  30
0672:  MOVWF  28
0673:  BTFSS  29.7
0674:  GOTO   67C
....................                delay_us(1);  
0675:  GOTO   676
0676:  GOTO   677
0677:  NOP
0678:  INCF   28,F
0679:  BTFSC  03.2
067A:  INCF   29,F
067B:  GOTO   673
....................       }                        
....................       else        //dados recebidos, interpreta e move 
067C:  GOTO   6A2
....................       { 
....................          if ((buff[0] == 43) && ((buff[1] == 48)))  // caso recebido +0, ir para posição inicial 
067D:  MOVF   2A,W
067E:  SUBLW  2B
067F:  BTFSS  03.2
0680:  GOTO   687
0681:  MOVF   2B,W
0682:  SUBLW  30
0683:  BTFSS  03.2
0684:  GOTO   687
....................             zero(); 
0685:  CALL   4E2
....................          else                     
0686:  GOTO   6A0
....................          { 
....................             converte(118); //busca valores para velocidade 
0687:  MOVLW  76
0688:  MOVWF  6C
0689:  CALL   516
....................             converte(120); //busca valores para x                   
068A:  MOVLW  78
068B:  MOVWF  6C
068C:  CALL   516
....................             converte(121); //busca valores para y    
068D:  MOVLW  79
068E:  MOVWF  6C
068F:  CALL   516
....................             converte(122); //busca valores para z 
0690:  MOVLW  7A
0691:  MOVWF  6C
0692:  CALL   516
....................             mover(passosx, passosy, passosz); 
0693:  MOVF   65,W
0694:  MOVWF  70
0695:  MOVF   64,W
0696:  MOVWF  6F
0697:  MOVF   67,W
0698:  MOVWF  72
0699:  MOVF   66,W
069A:  MOVWF  71
069B:  MOVF   69,W
069C:  MOVWF  74
069D:  MOVF   68,W
069E:  MOVWF  73
069F:  CALL   311
....................          } 
....................          flag = 0;  //desativa interpretação até o proximo envio  
06A0:  CLRF   29
06A1:  CLRF   28
....................       } 
....................    } 
06A2:  GOTO   651
.................... } 
....................  
06A3:  SLEEP

Configuration Fuses:
   Word  1: 3F2A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT MCLR NOLVP NOCPD
